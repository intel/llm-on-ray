name: Tests

on:
  workflow_call:
    inputs:
      ci_type:
        type: string
        default: 'pr'

jobs:
  setup-test:

    name: setup-test
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    runs-on: ubuntu-latest

    env:
      SHELL: bash -eo pipefail

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}
          architecture: 'x64'

      - name: Display Python version
        run: |
          python -c "import sys; print(sys.version)"

      - name: Run Test for Setup
        run: |
          ./tests/test_setup.sh CPU false

  getting-started-test:

    name: getting-started-test
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    runs-on: ubuntu-latest

    env:
      SHELL: bash -eo pipefail

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}
          architecture: 'x64'

      - name: Display Python version
        run: |
          python -c "import sys; print(sys.version)"

      - name: Run Test for Getting Started
        run: |
          ./tests/test_getting_started.sh

  bare-test:

    name: bare-test
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    runs-on: ubuntu-latest

    env:
      SHELL: bash -eo pipefail

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}
          architecture: 'x64'

      - name: Display Python version
        run: |
          python -c "import sys; print(sys.version)"

      - name: Install dependencies for tests
        run: |
          python -m pip install --upgrade pip
          pip install .[cpu] --extra-index-url https://download.pytorch.org/whl/cpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/cpu/us/
          # Dynamic link oneCCL and Intel MPI libraries
          source $(python -c "import oneccl_bindings_for_pytorch as torch_ccl; print(torch_ccl.cwd)")/env/setvars.sh
          # Additional libraries required  for pytest
          pip install -r ./tests/requirements.txt

      - name: Start Ray Cluster
        run: |
          ray start --head

      - name: Run Tests
        run: |
          ./tests/run-tests.sh

  docker-test:

    name: docker-test
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    runs-on: ubuntu-latest

    env:
      SHELL: bash -eo pipefail

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine Target
        id: "target"
        run: |
          target="inference"
          echo "target is ${target}"
          echo "target=$target" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: |
          DF_SUFFIX=".tests_cpu"
          TARGET=${{steps.target.outputs.target}}
          PYTHON_V=${{matrix.python-version}}
          USE_PROXY="0"
          source dev/scripts/ci-functions.sh
          build_and_prune ${TARGET} ${DF_SUFFIX} ${USE_PROXY} ${PYTHON_V}

      - name: Start Docker Container
        run: |
          TARGET=${{steps.target.outputs.target}}
          code_checkout_path=${{ github.workspace }}
          source dev/scripts/ci-functions.sh
          start_docker ${TARGET} ${code_checkout_path}
      
      - name: Install Dependencies for Tests
        run: |
          TARGET=${{steps.target.outputs.target}}
          source dev/scripts/ci-functions.sh
          install_dependencies ${TARGET}

      - name: Start Ray Cluster
        run: |
          TARGET=${{steps.target.outputs.target}}
          source dev/scripts/ci-functions.sh
          start_ray ${TARGET}

      - name: Run Tests
        run: |
          TARGET=${{steps.target.outputs.target}}
          source dev/scripts/ci-functions.sh
          run_tests ${TARGET}

      - name: Stop Container
        if: success() || failure()
        run: |
          TARGET=${{steps.target.outputs.target}}
          source dev/scripts/ci-functions.sh
          stop_container ${TARGET} 