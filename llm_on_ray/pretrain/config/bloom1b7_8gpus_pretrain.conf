{
    # Mode of the task, two option [ray|standalone].
    "run_mode" : "ray",
    # The global seed of pytorch.
    "seed": 42,
    # The global threads num of pytorch.
    "torch_thread_num": 56,
    # Config of accelerator, all items will be transfered to accelerate.Accelerator().
    "accelerator": {
        "gradient_accumulation_steps": 1,
    },
    
    "initializer":{
        "type":"MegatronInitializer",
        "name": "megatron",
        "megatron_config": {
            "data_path": ["/home/user/workspace/workspace/my-gpt2_text_document"],
            "data_impl": "mmap",
            "micro_batch_size": 2,
            "global_batch_size": 16,
            "seq_length": 2048,
            "use_dataset_only": True,
            "vocab_file": "/home/user/workspace/workspace/llm-ray/Finetune/gpt2-vocab.json",
            "tokenizer_type": "GPT2BPETokenizer",
            "merge_file": "/home/user/workspace/workspace/llm-ray/Finetune/gpt2-merges.txt",
            "train_iters": 6000000,
            "eval_interval": 10,
            "split": "949,50,1",
        },
    },

 
    "datasets": {
        "type": "MegatronDataset",
    },
    "tokenizer": {
        # The type of dataset, now only HuggingfaceTokenizer is supported.
        "type": "EmptyTokenizer",
        # The name/path of tokenizer in huggingface.
        "name": "",
        # Config of tokenizer, all items will be transfered to transformers.AutoTokenizer.from_pretrained().
        "config": {
            "max_token_id": 250880
        }
    },
    "model": {
        # The type of model, now only HuggingfaceModelForCausalLM is supported.
        #"type": "HuggingFaceModelForCausalLM",
        "type": "HuggingFaceModelFromConfig", 
        # The name/path of model in huggingface.
        "name": "/home/user/workspace/workspace/model/bloom-1b7",
        # Config of model, all items will be transfered to AutoModelForCausalLM.from_pretrained().
        "config": {}
    },
    "optimizer": {
        # The type of optimizer, only DefaultOptimizer is supported. All parameters in model will be optimized by DefaultOptimizer.
        "type": "DefaultOptimizer",
        # The name of optimizer, all optimizers in torch.optim are supported.
        "name": "AdamW",
        # Config of optimizer, all items will be transfered to torch.optim.[name]()
        "config": {
            "lr" : 1e-5,
        }
    },
    "trainer": {
        # The type of trainer, now only DefaultTrainer is supported.
        "type": "MegatronPreTrainer",
        # Number of train epochs
        "num_train_epochs": 1,
        # The max training step of each epoch, if set to None means unlimited.
        # In most cases this item is for debugging.
        "max_train_step": None,
        # The max evaluating step of each epoch, if set to None means unlimited.
        # In most cases this item is for debugging.
        "max_eval_step": None,
        # Output directory. Only absolute path is supported.
        "output": "/tmp/output",
        "checkpoint_step": 100,
        "dataprocesser": {
            # The type of dataprocesser. 
            "type": "MegatronProcesser",
        },
        "lr_scheduler": {
            # Whether to enable learning rate scheduler
            "enable": True,
            # The max training step of lr_scheduler. This item will be transfered to transformers.get_scheduler().
            "max_train_steps": None,
            # The type of lr_scheduler. This item will be transfered to transformers.get_scheduler().
            "lr_scheduler_type": "linear",
            # Number of warmup steps. This item will be transfered to transformers.get_scheduler().
            "num_warmup_steps": 0,
        },
        "checkpoint": {
            # The root path of checkpoint. Only absolute path is supported
            "root_path": "/tmp/llm-ray/checkpoint",
            "num_to_keep": 10
        }
    },
    # Ray related configuration, Only used when mode is set to ray
    "ray_config": {
        # The config of ray.init. All items will be tranfered to ray.init().
        # More information can refer to https://docs.ray.io/en/latest/ray-core/api/doc/ray.init.html
        "init": {
            # Environment variables for ray workers
            "runtime_env": {
                "env_vars": {
                    "OMP_NUM_THREADS": "56", 
                    #"ACCELERATE_USE_CPU": "True", 
                    "ACCELERATE_MIXED_PRECISION": "no",
                    #"CCL_WORKER_COUNT": "1",        # CCL setting
                    #"CCL_LOG_LEVEL": "info",
                    "WORLD_SIZE": "8",    # Enable multi-process
                    "PYTORCH_CUDA_ALLOC_CONF":"max_split_size_mb:32",
                }
            },
            # The address of the Ray cluster to connect to.
            "address": "auto",
            # The IP address of the node that we are on.
            "_node_ip_address": "127.0.0.1",
        },
        "scaling_config": {
            # Number of worker.
            "num_workers": 8,
            "use_gpu": True,
            # The amount of resources per worker.
            "resources_per_worker": {
                "CPU": 10,
                "GPU": 1
            },
            # The placement strategy to use for the placement group of the Ray actors.
            "placement_strategy": "SPREAD"
        },
        "torch_config": {
            # The backend of the communication library.
            "backend" : "nccl",
        },
        "failure_config": {
            # The maximum number of restarts when task fail.
            "max_failures": 0
        },
        "run_config": {
            # Local dir to save training results to.
            "local_dir": "/tmp/llm-ray"
        }
    }
}
