# I am python, not json
{
    # The global seed of pytorch.
    "seed": 42,
    # The global threads num of pytorch.
    "torch_thread_num": 56,
    # you should setup this path based on your environment.
    "megatron_deepspeed_path": '/home/user/workspace/code/Model-References/PyTorch/nlp/DeepSpeedExamples/Megatron-DeepSpeed',
    "megatron_config": {
        "num_layers": 32,
        "hidden_size": 4096,
        "ffn_hidden_size": 11008,
        "num_attention_heads": 32,
        "max_position_embeddings":4096,
        # setup the file path based on your data dir
        "vocab_file": "megatron-data/gpt2-vocab.json",
        "tokenizer_type": "GPT2BPETokenizer",
        "merge_file": "megatron-data/gpt2-merges.txt",
        "seq_length": 4096,
        "micro_batch_size": 1,
        #"eval_micro_batch_size": 2,
        #"rampup_batch_size": "16 16 5_000_000",
        "global_batch_size": 8,
        "train_samples": 300_000_000,
        "loss_scale": 12,
        "clip_grad": 1.0,
        "seed": 42,
        "optimizer": "adamw",
        "adam_beta1": 0.9,
        "adam_beta2":0.999,
        "adam_eps": 1e-8,
        "lr": 1e-4,
        "min_lr": 1e-5,
        "lr_decay_style": "cosine",
        "lr_decay_samples": 126_953_125,
        "lr_warmup_samples": 216_320,
        "clip_grad": 1.0,
        "weight_decay": 0.1,
        "log_interval": 10,
        "save_interval": 1500,
        "eval_interval": 100,
        "eval_iters": 5,
        "tensor_model_parallel_size": 4,
        "pipeline_model_parallel_size": 2,
        "tensorboard_dir": "/home/user/workspace/tensorboard",
        "log_timers_to_tensorboard": True,
        "log_batch_size_to_tensorboard": True,
        "log_validation_ppl_to_tensorboard": True,
        "masked_softmax_fusion": False,
        "bf16": True,
        "deepspeed": True,
        "deepspeed_config": {
            "train_micro_batch_size_per_gpu": 1,
            "train_batch_size": 8,
            "steps_per_print": 10,
            "gradient_clipping": 1.0,
            "zero_optimization": {
                "stage": 0
            },
            "fp16": {
                "enabled": False,
                #"loss_scale": 0,
                #"loss_scale_window": 500,
                #"hysteresis": 2,
                #"min_loss_scale": 1,
                #"initial_scale_power": 12
            },
            "bf16": {"enabled": True},
            "wall_clock_breakdown": False
        },
        "zero_stage":0,
        "deepspeed_activation_checkpointing": True,
        "save": "./checkpoint_megatron",
        # setup the path based on your data dir
        "data_path": ["megatron-data/my-gpt2_text_document"],
        "data_impl": "mmap",
        "split": "949,50,1",
        "distributed_backend": "hccl",
        "use_hpu": True,
        "hpu_deterministic": True
    },

    # Ray related configuration, Only used when mode is set to ray
    "ray_config": {
        # The config of ray.init. All items will be tranfered to ray.init().
        # More information can refer to https://docs.ray.io/en/latest/ray-core/api/doc/ray.init.html
        "init": {
            # Environment variables for ray workers
            "runtime_env": {
                "env_vars": {
                    "OMP_NUM_THREADS": "128", 
                    #"ACCELERATE_USE_CPU": "True", 
                    "ACCELERATE_MIXED_PRECISION": "no",
                    #"CCL_WORKER_COUNT": "2",        # CCL setting
                    #"CCL_LOG_LEVEL": "info",
                    "WORLD_SIZE": "8",    # Enable multi-process
                }
            },
            # The address of the Ray cluster to connect to.
            "address": "auto",
            # The IP address of the node that we are on.
            "_node_ip_address": "127.0.0.1",
        },
        "scaling_config": {
            # Number of worker.
            "num_workers": 8,
            #"use_hpu": True,
            # The amount of resources per worker.
            "resources_per_worker": {
                "CPU": 10,
            },
            # The placement strategy to use for the placement group of the Ray actors.
            "placement_strategy": "SPREAD"
        },
        "torch_config": {
            # The backend of the communication library.
            "backend" : "hccl",
        },
        "failure_config": {
            # The maximum number of restarts when task fail.
            "max_failures": 0
        },
        "run_config": {
            # Local dir to save training results to.
            "local_dir": "/tmp/llm-ray"
        }
    }
}
